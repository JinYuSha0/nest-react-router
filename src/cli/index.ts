import { Command } from "commander";
import path from "path";
import fs from "fs";

const program = new Command();

type Options = {
  file?: string;
  watch?: boolean;
};

let flag = false;

function bootstrap() {
  program
    .usage("<command> [options]")
    .option(
      "-f --file",
      "Watch remix backend relative file root directory (default: ./src/routes/server)"
    )
    .option("-w --watch", "Watch remix backend file changes")
    .helpOption("-h, --help", "Output usage information.");
  program.parse(process.argv);
  const options: Options = program.opts();
  const backendRootDir = path.join(
    process.cwd(),
    options.file ?? "./src/routes/server"
  );
  if (!fs.existsSync(backendRootDir)) {
    console.error("\x1B[31m", `${backendRootDir} does not exist`);
    return;
  }
  if (options.watch) {
    console.log("\x1b[32m", `[nestjs-remix] start watch backend file`);
    fs.watch(backendRootDir, (event, filename) => {
      if (filename === "index.ts" || flag) return;
      generateIndexFile(backendRootDir);
    });
  } else {
    generateIndexFile(backendRootDir);
  }
}
bootstrap();

function removeExtension(filePath) {
  return path.parse(filePath).name;
}

function generateIndexFile(backendRootDir: string) {
  flag = true;
  const files = fs
    .readdirSync(backendRootDir)
    .filter((filename) => filename !== "index.ts")
    .map((filename) => removeExtension(filename));
  const newContent = template(files);
  const oldContent = fs
    .readFileSync(path.join(backendRootDir, "index.ts"))
    .toString();
  if (newContent === oldContent) return;
  fs.writeFileSync(path.join(backendRootDir, "index.ts"), newContent);
  flag = false;
}

function template(files: string[]) {
  const Warning = `
/**
 * Warning!!!
 * Automatically generated by nestjs-remix cli, please do not modify it
 **/
`;
  const code = files.map((file) => `import "./${file}";`).join("\n");
  return Warning + "\n" + code;
}

process.on("SIGINT", function () {
  process.exit(0);
});
